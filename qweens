#lang racket

(define (accumulate op init seq)
  (if (null? seq)
      init
      (op (car seq) (accumulate op init (cdr seq)))))

(define (filter pred seq)
  (accumulate (lambda (x y) (append (if (pred x) (list x) '()) y)) '() seq)
  )

(define (enumerate f n)
  (define (iter i res)
    (if (< i f)
        res
        (iter (- i 1) (cons i res)))
    )
  (iter n '())
  )

(define (get-variants seq)
  (if (null? seq) 
      (list (list))
      (apply append 
             (map (lambda (elem) 
                    (map (lambda (y) (cons elem y)) (get-variants (filter (lambda (r) (not (= r elem))) seq)))) seq))
         )
  )

(define (draw seq)
  (newline)
  (define max (length seq))
  (define (draw-line l)
    (define (iter-draw-line i n)
      (cond ((= i max) (newline))
            ((= i n) (display "1") (iter-draw-line (+ i 1) n))
            (else (display "0") (iter-draw-line (+ i 1) n))
            )
      )
    (iter-draw-line 0 l)
    )
  (define (iter s)
    (cond ((null? s) (newline))
          (else (draw-line (car s)) (iter (cdr s)))
          )
    )
  (iter seq)
  )

(define (check seq)
  (define (safe? c p)
    (if (null? p) true (if (or (= (car p) (+ c (length p))) (= (car p) (- c (length p)))) false (safe? c (cdr p))))
    )
  (define (iter s p)
    (cond ((null? s) true)
          (else (if (safe? (car s) p) (iter (cdr s) (append p (list (car s)))) false))
         )
    )
  (iter seq '())
  )

(define (log-false s r) 
  (display s) (display " - ") (display r) (newline)
  )

(define enum (enumerate 0 7))

(map (lambda (seq) (let ((r (check seq))) (log-false seq r) (if r (draw seq) '()))) (get-variants enum))

